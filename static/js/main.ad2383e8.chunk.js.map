{"version":3,"sources":["apolloClient.js","components/Header.js","queries.js","components/CBC.js","components/BBC.js","components/CNN.js","components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["restLink","RestLink","uri","headers","Authorization","credentials","client","ApolloClient","link","cache","InMemoryCache","Title","Typography","Header","level","HeadlinesBbc","gql","HeadlinesCbc","HeadlinesCnn","CBC","Meta","Card","styles","publishedAt","marginTop","useState","articles","setArticles","useEffect","query","then","response","data","headlines","console","log","catch","error","useQuery","loading","message","gutter","map","item","title","description","url","urlToImage","xs","span","md","lg","href","target","className","rel","hoverable","style","width","src","substring","BBC","CNN","Home","TabPane","Tabs","onChange","key","type","tab","forceRender","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ad2383e8.chunk.js","sourcesContent":["import { ApolloClient } from 'apollo-client'\r\nimport { InMemoryCache } from 'apollo-cache-inmemory'\r\nimport { RestLink } from 'apollo-link-rest'\r\n\r\nconst restLink = new RestLink({\r\n  uri: 'https://newsapi.org/v2/',\r\n  headers: {\r\n    Authorization: '16849f05254a4414971358ff80e77661'\r\n  },\r\n   credentials: 'include',\r\n   \"Access-Control-Allow-Origin\":\"*\"\r\n})\r\n\r\nexport const client = new ApolloClient({\r\n  link: restLink,\r\n  cache: new InMemoryCache()\r\n})\r\nexport default client;","import React from 'react'\r\nimport { Typography, Divider } from 'antd';\r\nconst { Title } = Typography;\r\n\r\nconst Header = () => {\r\n  return (\r\n    <>\r\n    <Divider><Title level={3}>News Today</Title></Divider>\r\n    </>\r\n    )\r\n}\r\n\r\nexport default Header;","import gql from 'graphql-tag'\r\n\r\nexport const HeadlinesBbc = gql`\r\n  query TopHeadlines {\r\n    headlines\r\n      @rest(\r\n        type: \"HeadlinesPayload\"\r\n        path: \"top-headlines?sources=bbc-news\"\r\n      ) {\r\n      totalResults\r\n      articles @type(name: \"ArticlePayload\") {\r\n        title\r\n        publishedAt\r\n        url\r\n        urlToImage\r\n        description\r\n        content\r\n        source @type(name: \"SourcePayload\") {\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const HeadlinesCbc = gql`\r\n  query TopHeadlines {\r\n    headlines\r\n      @rest(\r\n        type: \"HeadlinesPayload\"\r\n        path: \"top-headlines?sources=cbc-news\"\r\n      ) {\r\n      totalResults\r\n      articles @type(name: \"ArticlePayload\") {\r\n        title\r\n        publishedAt\r\n        url\r\n        urlToImage\r\n        description\r\n        content\r\n        source @type(name: \"SourcePayload\") {\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const HeadlinesCnn = gql`\r\n  query TopHeadlines {\r\n    headlines\r\n      @rest(\r\n        type: \"HeadlinesPayload\"\r\n        path: \"top-headlines?sources=cnn\"\r\n      ) {\r\n      totalResults\r\n      articles @type(name: \"ArticlePayload\") {\r\n        title\r\n        publishedAt\r\n        url\r\n        urlToImage\r\n        description\r\n        content\r\n        source @type(name: \"SourcePayload\") {\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`","import React, { useState, useEffect } from 'react'\r\nimport { useQuery } from '@apollo/client'\r\nimport {HeadlinesCbc} from '../queries'\r\nimport client from '../apolloClient'\r\nimport { Card, Row, Col} from 'antd'\r\n\r\nconst getStyles = () => ({\r\n  publishedAt : {\r\n    marginTop:'20px'\r\n  }\r\n})\r\n\r\n\r\nconst CBC = () => {\r\n  const { Meta } = Card;\r\n  const styles = getStyles()\r\n  const [articles, setArticles] = useState([])\r\n\r\n  const requestHeadlinesofCbc = () => {\r\n    client\r\n    .query({\r\n      query: HeadlinesCbc\r\n    })\r\n    .then(response => {\r\n      setArticles(response.data.headlines.articles)\r\n      console.log('here', response)\r\n    })\r\n    .catch(error => {\r\n      console.log('ERROR ==>', error)\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    requestHeadlinesofCbc()\r\n  }, [])\r\n\r\n  const {loading, error, data} = useQuery(HeadlinesCbc)\r\n  if (loading) return 'Loading...'\r\n  if (error) return `Error! ${error.message}`\r\n\r\n  console.log('data', data)\r\n  \r\n\r\n  return (\r\n  <div>\r\n    <Row gutter={[16, 16]}>\r\n      {articles.map(item => {\r\n        const {title, description, publishedAt, url, urlToImage} = item\r\n      \r\n      return (\r\n        <Col xs={{ span: 24 }} md={{ span: 12 }} lg={{ span: 8 }} key={url}>\r\n            <a href={url} target=\"_blank\" className=\"newslink\" rel=\"noopener noreferrer\">\r\n            <Card\r\n              hoverable\r\n              style={{ width: '100%' }}\r\n              >\r\n              <img src={urlToImage} className=\"thumbnail\"/>\r\n              <Meta \r\n              title={title}\r\n              description={description} \r\n              style={styles.publishedAt}\r\n              />\r\n              <p style={styles.publishedAt}>{publishedAt.substring(0, 10)}</p> \r\n            </Card>\r\n            </a>\r\n        </Col>\r\n      )\r\n     })}\r\n    </Row>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default CBC","import React, { useState, useEffect } from 'react'\r\nimport { useQuery } from '@apollo/client'\r\nimport {HeadlinesBbc} from '../queries'\r\nimport client from '../apolloClient'\r\nimport { Card, Row, Col } from 'antd'\r\n\r\nconst getStyles = () => ({\r\n  publishedAt : {\r\n    marginTop:'20px'\r\n  }\r\n})\r\n\r\n\r\nconst BBC = () => {\r\n  const { Meta } = Card;\r\n  const styles = getStyles()\r\n  const [articles, setArticles] = useState([])\r\n\r\n  const requestHeadlinesofBbc = () => {\r\n    client\r\n    .query({\r\n      query: HeadlinesBbc\r\n    })\r\n    .then(response => {\r\n      setArticles(response.data.headlines.articles)\r\n    })\r\n    .catch(error => {\r\n      console.log('ERROR ==>', error)\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    requestHeadlinesofBbc()\r\n  }, [])\r\n\r\n  const {loading, error, data} = useQuery(HeadlinesBbc)\r\n  if (loading) return 'Loading...'\r\n  if (error) return `Error! ${error.message}`\r\n\r\n  console.log('data', data)\r\n  \r\n\r\n  return (\r\n  <div>\r\n    <Row gutter={[16, 16]}>\r\n      {articles.map((item) => {\r\n        const {title, description, publishedAt, url, urlToImage} = item\r\n      \r\n      return (\r\n        <Col xs={{ span: 24 }} md={{ span: 12 }} lg={{ span: 8 }} key={url}>\r\n            <a href={url} target=\"_blank\" className=\"newslink\" rel=\"noopener noreferrer\">\r\n            <Card\r\n              hoverable\r\n              style={{ width: '100%' }}\r\n              >\r\n              <img src={urlToImage} className=\"thumbnail\"/>\r\n              <Meta \r\n              title={title}\r\n              description={description} \r\n              style={styles.publishedAt}\r\n              />\r\n              <p style={styles.publishedAt}>{publishedAt.substring(0, 10)}</p> \r\n            </Card>\r\n            </a>\r\n        </Col>\r\n      )\r\n     })}\r\n    </Row>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default BBC","import React, { useState, useEffect } from 'react'\r\nimport { useQuery } from '@apollo/client'\r\nimport {HeadlinesCnn} from '../queries'\r\nimport client from '../apolloClient'\r\nimport { Card, Row, Col} from 'antd'\r\n\r\nconst getStyles = () => ({\r\n  publishedAt : {\r\n    marginTop:'20px'\r\n  }\r\n})\r\n\r\n\r\nconst CNN = () => {\r\n  const { Meta } = Card;\r\n  const styles = getStyles()\r\n  const [articles, setArticles] = useState([])\r\n\r\n  const requestHeadlinesofCnn = () => {\r\n    client\r\n    .query({\r\n      query: HeadlinesCnn\r\n    })\r\n    .then(response => {\r\n      setArticles(response.data.headlines.articles)\r\n    })\r\n    .catch(error => {\r\n      console.log('ERROR ==>', error)\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    requestHeadlinesofCnn()\r\n  }, [])\r\n\r\n  const {loading, error, data} = useQuery(HeadlinesCnn)\r\n  if (loading) return 'Loading...'\r\n  if (error) return `Error! ${error.message}`\r\n\r\n  console.log('data', data)\r\n  \r\n\r\n  return (\r\n  <div>\r\n    <Row gutter={[16, 16]}>\r\n      {articles.map(item => {\r\n        const {title, description, publishedAt, url, urlToImage} = item\r\n      \r\n      return (\r\n        <Col xs={{ span: 24 }} md={{ span: 12 }} lg={{ span: 8 }} key={url}>\r\n            <a href={url} target=\"_blank\" className=\"newslink\" rel=\"noopener noreferrer\">\r\n            <Card\r\n              hoverable\r\n              style={{ width: '100%' }}\r\n              >\r\n              <img src={urlToImage} className=\"thumbnail\"/>\r\n              <Meta \r\n              title={title}\r\n              description={description} \r\n              style={styles.publishedAt}\r\n              />\r\n              <p style={styles.publishedAt}>{publishedAt.substring(0, 10)}</p> \r\n            </Card>\r\n            </a>\r\n        </Col>\r\n      )\r\n     })}\r\n    </Row>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default CNN","import React from 'react'\r\n\r\nimport Header from './Header'\r\nimport { Tabs } from 'antd';\r\nimport CBC from './CBC'\r\nimport BBC from './BBC'\r\nimport CNN from './CNN'\r\n\r\n\r\nconst Home = () => {\r\n  const { TabPane } = Tabs;\r\n  \r\n  function callback(key) {\r\n    // console.log(key);\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <Header />\r\n    <Tabs onChange={callback} type=\"card\">\r\n      <TabPane tab=\"CBC\" key=\"1\" forceRender>\r\n        <CBC />\r\n      </TabPane>\r\n      <TabPane tab=\"BBC\" key=\"2\" forceRender>\r\n        <BBC />\r\n      </TabPane>\r\n      <TabPane tab=\"CNN\" key=\"3\" forceRender>\r\n        <CNN />\r\n      </TabPane>\r\n    </Tabs>\r\n    </>\r\n  )\r\n}\r\n  \r\n\r\nexport default Home","import React from 'react';\nimport {HashRouter as Router, Route} from 'react-router-dom'\nimport {ApolloProvider} from '@apollo/client'\nimport client from './apolloClient'\nimport Home from './components/Home'\n\nimport  \"./App.css\"\n\nconst App = () => (\n    <ApolloProvider client={client}>\n       {/* <div className=\"App\" /> */}\n      <Home />\n    </ApolloProvider>\n)\n\n\nexport default App;\n\n//https://newsapi.org/\n//https://github.com/saebomp/news_app/blob/master/src/service/api.js\n//https://www.newline.co/@amandeepmittal/how-to-build-react-native-apps-with-graphql-and-apollo--d74eb12e","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}